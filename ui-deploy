#!/usr/bin/env bash
set -e

# Syncs the built directory to the supplied S3 path.
#
# Usage:
#     ui-deploy "<S3_PATH>" "<S3 URL>" "<current branch>" ["<comma separated list of ignored branches>"] ["<region>"]
#
# Example:
#     ui-deploy "hg-cf-web-ui" "https://web-dev.hugoai.com/HGA-1234" "master" "master,stage,prod" "us-west-2"

# Load shared utils
. ./hg-circle-scripts/utils
bash ./hg-circle-scripts/configure-awscli

s3_path=$1
s3_url=$2
current_branch=$3

echo "S3_PATH: $s3_path"
echo "S3_URL: $s3_url"
echo "CURRENT_BRANCH: $current_branch"

if [ -n $3 ]; then
    # Default to these..
    ignored_branches=("master" "stage" "prod")
else
    ignored_branches=$(echo $4 | tr "," "\n")
fi

region=$5
if [ -n $region ]; then
    region="us-west-2"
fi

# Set the static path for feature branches
if [[ "${ignored_branches[*]}" != *"$current_branch"* ]]; then
    log "Setting homepage for feature branch to \"${s3_url}\""
    # https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#building-for-relative-paths
    export PUBLIC_URL="$s3_url"
    # Disable Bugsnag for feature branches.
    echo "REACT_APP_BUGSNAG_API_KEY=" >> .env
fi

log "Building static files"
yarn run build

# @todo: Once S3 object tagging is out of beta, tag all synced objects with env/purpose
log "Deploying to S3"
aws s3 sync build/ "s3://${s3_path}/${current_branch}" \
  --region $region \
  --exclude "*.map" \
  --exclude "*index.html" \
  --exclude "*info.json" \
  --exclude "*manifest.json" \
  --exclude "*asset-manifest.json" \
  --exclude "*service-worker.js" \
  --cache-control "max-age=31536000,public"

# Upload index.html with no-cache policies
log "Uploading index.html"
aws s3 cp build/index.html "s3://${s3_path}/${current_branch}/index.html" \
  --region $region \
  --metadata-directive REPLACE \
  --cache-Control: max-age=0,s-maxage=31556952,must-revalidate \
  --content-type text/html \
  --expires "Sat, 01 Jan 2000 00:00:00 GMT" \
  --acl public-read

log "Uploading static/info.json"
if [[ -f "build/static/info.json" ]]; then
    # Upload info.json with no-cache policies
    aws s3 cp build/static/info.json "s3://${s3_path}/${current_branch}/static/info.json" \
    --region $region \
    --metadata-directive REPLACE \
    --cache-control max-age=0,no-cache,no-store,must-revalidate \
    --content-type text/html \
    --expires "Sat, 01 Jan 2000 00:00:00 GMT" \
    --acl public-read
else
    log "static/info.json was not found"
fi

log "Uploading apple-app-site-association"
if [[ -f "build/apple-app-site-association" ]]; then
    # Upload apple-app-site-association with no-cache policies
    aws s3 cp build/apple-app-site-association "s3://${s3_path}/${current_branch}/apple-app-site-association" \
    --region $region \
    --metadata-directive REPLACE \
    --cache-control max-age=0,no-cache,no-store,must-revalidate \
    --content-type application/json \
    --expires "Sat, 01 Jan 2000 00:00:00 GMT" \
    --acl public-read
else
    log "static/apple-app-site-association was not found"
fi

log "Uploading manifest.json"
if [[ -f "build/manifest.json" ]]; then
    # Upload manifest.json with no-cache policies
    aws s3 cp build/manifest.json "s3://${s3_path}/${current_branch}/manifest.json" \
    --region $region \
    --metadata-directive REPLACE \
    --cache-control max-age=0,no-cache,no-store,must-revalidate \
    --content-type application/json \
    --expires "Sat, 01 Jan 2000 00:00:00 GMT" \
    --acl public-read
else
    log "manifest.json was not found"
fi

log "Uploading asset-manifest.json"
if [[ -f "build/asset-manifest.json" ]]; then
    # Upload asset-manifest.json with no-cache policies
    aws s3 cp build/asset-manifest.json "s3://${s3_path}/${current_branch}/asset-manifest.json" \
    --region $region \
    --metadata-directive REPLACE \
    --cache-control max-age=0,no-cache,no-store,must-revalidate \
    --content-type application/json \
    --expires "Sat, 01 Jan 2000 00:00:00 GMT" \
    --acl public-read
else
    log "asset-manifest.json was not found"
fi

log "Uploading service-worker.js"
if [[ -f "build/service-worker.js" ]]; then
    # Upload service-worker.js with no-cache policies
    aws s3 cp build/service-worker.js "s3://${s3_path}/${current_branch}/service-worker.js" \
    --region $region \
    --metadata-directive REPLACE \
    --cache-control max-age=0,no-cache,no-store,must-revalidate \
    --content-type application/javascript \
    --expires "Sat, 01 Jan 2000 00:00:00 GMT" \
    --acl public-read
else
    log "service-worker.js was not found"
fi
