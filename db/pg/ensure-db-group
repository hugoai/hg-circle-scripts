#!/usr/bin/env bash
set -e

# Load shared utils
. ./hg-circle-scripts/utils
. ./hg-circle-scripts/db/pg/utils

##
# Ensures we have a postgres database group (role), suppressing duplicate errors if needs be.
##

# Check all args are passed
if [ $# -ne 7 ]; then
    echo "Must supply all arguments. Exiting..."
    echo 'Usage: ensure-pg-db "<host prefix>" "<master username>" "<master password>" "<db name>" "<group name>" "<csv list of schema privileges>" "<csv list of db privileges>"'
    echo ''
    echo 'Eg. ensure-pg-db-group "api-dev" "postgres" "abc123" "api-db" "read" "SELECT,INSERT,UPDATE,DELETE" "CREATE,"'
    exit 1
fi

DB_HOST_PREFIX=$1
DB_MASTER_USERNAME=$2
DB_MASTER_PASSWORD=$3
DB_NAME=$4
GROUP_NAME=$5
CSV_SCHEMA_PRIVILEGES=$6
CSV_DB_PRIVILEGES=$7

DB_HOST="${DB_HOST_PREFIX}.pg.hugoai.com"  # Keeps things consistently applied!
SCHEMA_PRIVILEGES=$(echo $CSV_SCHEMA_PRIVILEGES | tr "," "\n")  # Split into iterable array.
DB_PRIVILEGES=$(echo $CSV_DB_PRIVILEGES | tr "," "\n")  # Split into iterable array.

log "Creating group \"${GROUP_NAME}\" on host \"${DB_HOST}\""

# Not passing LOGIN to CREATE ROLE makes it a "group" role :)
read -d '' sql << EOF
DO \$\$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname='${GROUP_NAME}') THEN
        CREATE ROLE ${GROUP_NAME};
    END IF;
END
\$\$;
EOF
execute_sql "$sql"

log "Successfully handled ensuring group \"${GROUP_NAME}\" on host \"${DB_HOST}\""

for PRIVILEGE in $SCHEMA_PRIVILEGES; do
    # Grant statements return exit_code=0 even if duplicate membership detected :D
    execute_sql "GRANT ${PRIVILEGE} ON ALL TABLES IN SCHEMA public TO ${GROUP_NAME};"
    log "Successfully set privilege \"${PRIVILEGE}\" for group \"${GROUP_NAME}\" on host \"${DB_HOST}\""
done

for PRIVILEGE in $DB_PRIVILEGES; do
    # Grant statements return exit_code=0 even if duplicate membership detected :D
    execute_sql "GRANT ${PRIVILEGE} ON DATABASE ${DB_NAME} TO ${GROUP_NAME};"
    log "Successfully set privilege \"${PRIVILEGE}\" for group \"${GROUP_NAME}\" on host \"${DB_HOST}\""
done

log "Successfully handled ensuring \"${GROUP_NAME}\" for host \"${DB_HOST}\""
