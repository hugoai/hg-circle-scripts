#!/usr/bin/env bash
set -e

# Load shared utils
. ./hg-circle-scripts/utils
. ./hg-circle-scripts/db/pg/utils

##
# Ensures we have a postgres database user, suppressing duplicate errors if needs be.
##

# Check all args are passed
if [ $# -ne 7 ]; then
    echo "Must supply all arguments. Exiting..."
    echo 'Usage: ensure-pg-db "<host prefix>" "<master username>" "<master password>" "<db name>" "<csv string of group>" "<username>" "<password>"'
    echo '-> Valid groups values: "read" & "write"'
    echo ''
    echo 'Eg. ensure-pg-db-user "api-dev" "postgres" "abc123" "api-db" "read,write" "read_write_user" "abc123"'
    exit 1
fi

DB_HOST_PREFIX=$1
DB_MASTER_USERNAME=$2
DB_MASTER_PASSWORD=$3
DB_NAME=$4
CSV_ROLES=$5
USERNAME=$6
PASSWORD=$7

DB_HOST="${DB_HOST_PREFIX}.pg.hugoai.com"  # Keeps things consistently applied!
ROLES=$(echo $CSV_ROLES | tr "," "\n")  # Split into iterable array.

log "Creating user \"${USERNAME}\" on host \"${DB_HOST}\""

# Passing LOGIN to CREATE ROLE makes it a "user" role :)
read -d '' sql << EOF
DO \$\$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname='${USERNAME}') THEN
        CREATE ROLE ${USERNAME} LOGIN;
    END IF;
END
\$\$;
EOF
execute_sql "$sql"

log "Successfully created user \"${USERNAME}\" on host \"${DB_HOST}\""

# Alter user statements are idompotent, no need to catch errors.
execute_sql "ALTER USER ${USERNAME} WITH PASSWORD '${PASSWORD}';"

log "Successfully set password for user \"${USERNAME}\" on host \"${DB_HOST}\""

for ROLE in $ROLES; do
    # Grant statements return exit_code=0 even if duplicate membership detected :D
    execute_sql "GRANT ${ROLE} TO ${USERNAME};"
    log "Successfully set role \"${ROLE}\" for user \"${USERNAME}\" on host \"${DB_HOST}\""
done

log "Successfully handled ensuring user \"${USERNAME}\" on host \"${DB_HOST}\""
